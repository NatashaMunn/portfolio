[
  {
    "path": "posts/2025-07-03-exploring-journalism-as-a-commodity-through-tracery-live/",
    "title": "Exploring Journalism as a Commodity Through Tracery Live.",
    "description": "Using Random Algorithmic Text Generation to Creativly Critique the Journalism Industry",
    "author": [
      {
        "name": "Natasha Munn",
        "url": {}
      }
    ],
    "date": "2024-09-26",
    "categories": [],
    "contents": "\nKia Ora! I haven’t posted in a while, so I thought I’d return with something different.\nFor this project, I explored a new language I had never used before, called Tracery Live. Tracery allows you to construct texts using algorithmic generation, enabling you to refresh and shuffle text to create an ever-changing document.\nI wanted to use the Tracery format to produce a social commentary on communication. Then, my inspiration stuck when I read a serious article on a local news site. All I wanted was to get up to date on information, but then I was bombarded with Burger King ads in the middle of the article. This led me to want to investigate the commercialization of news sites and the treatment of journalism as a commodity. To accomplish this, I used Tracery to create a stark contrast between the serious topics in breaking news and the intrusive nature of advertising. I made headlines with the intent of causing concern to the reader and connecting them to serious issues in the news, such as politics, law, technology, crime, and sports. My original plan was to make the stories serious as well, but then I decided to lean into a parody of the commercialization of journalism. You can check out the final product by clicking\nhere.\nEach randomised story about serious issues includes an advertisement regarding something in the story. The stories also get interrupted by intrusive ads that interfere with your reading. Through parody, my goal was to make a mockery of how much it has infiltrated the journalism industry and prompt critical thinking about how interference in advertising affects our access to information. The news should aid in empowering democracy, so why does it seem like its primary concern is to attract consumers and generate ad revenue? Try refreshing the Tracery page to look at all the different combinations of stories you can get!\nIf my resources allowed me, I would have had the ads pop up without warning while you were scrolling to better model what happens on news sites and showcase the manipulation and interference methods that corporations use so these advertisements invade your screen and command your attention. This project gave me good practice in computational thinking, particularly by thinking at multiple levels of abstraction as I conceptualized all of the outcomes possible through Tracery. Overall, this process made me rethink the journalism industry through the critical lens of a communications student.\nThis has been my most unique project so far, and I loved dabbling in the world of journalism for this one. Tracery is a uniquely fun tool, and the possibilities for creation are endless!\n\n\n\n",
    "preview": {},
    "last_modified": "2025-07-03T21:47:24+12:00",
    "input_file": {}
  },
  {
    "path": "posts/2025-07-03-webscraping-part-2-obtaining-image-data-from-digital-sources/",
    "title": "Webscraping Part 2: Obtaining Image Data from Digital Sources",
    "description": "Web scraping images and an investigation into the success of the MCU!",
    "author": [
      {
        "name": "Natasha Munn",
        "url": {}
      }
    ],
    "date": "2024-07-21",
    "categories": [],
    "contents": "\nWelcome to Part 2 of experimenting with web scraping! In the last post, I was scraping text, specifically government ministers’ release titles and content on the Beehive website. For this next part, I will be working with images!\nFirst, let’s load tidyverse, rvest, and magick.\n\n\nShow code\n\nlibrary(tidyverse)\nlibrary(rvest)\nlibrary(magick)\n\n\nToday’s data context will be the Marvel Cinematic Universe There has been a lot of discourse recently about the success of the MCU and whether their films are having as much success as they used to, so let’s investigate this.\nThe first thing I wanted to investigate was the viewer’s opinion of the films. Later, we will look into the actual box office data. Using the same web scraping method as my last post, I scraped the Rotten Tomatoes website (which I checked the terms and conditions and robots.txt file for) to get data on each MCU film’s release year and Rotten Tomatoes meter score. Then, I put this information into the data frame rotten_data.\nI did not use the get_release function this time with system sleep because I will only be scraping one webpage rather than multiple web pages from a single website. We should be fine since I will only be scraping the page once to get all of my information.\n\n\nShow code\n\n# ROTTEN TOMATOES DATA\n\nrotten_tomatoes <- \"https://editorial.rottentomatoes.com/guide/all-marvel-cinematic-universe-movies-ranked/\"\n\nmarvel_films <- read_html(rotten_tomatoes)\n\nmovie_title <- marvel_films %>%\n  html_elements(\".article_movie_title\") %>%\n  html_elements(\"h2\") %>%\n  html_elements(\"a\") %>%\n  html_text2()\n\nyear_released <- marvel_films %>%\n  html_elements(\".start-year\") %>%\n  html_text2() \n\nmeter_score <- marvel_films %>%\n  html_elements(\".tMeterScore\") %>%\n  html_text2()\n\nrotten_data <- tibble(movie_title, year_released, meter_score)\n\nprint(rotten_data)\n\n# A tibble: 36 × 3\n   movie_title                               year_released meter_score\n   <chr>                                     <chr>         <chr>      \n 1 Black Panther                             (2018)        96%        \n 2 Avengers: Endgame                         (2019)        94%        \n 3 Iron Man                                  (2008)        94%        \n 4 Thor: Ragnarok                            (2017)        93%        \n 5 Spider-Man: No Way Home                   (2021)        93%        \n 6 Spider-Man: Homecoming                    (2017)        92%        \n 7 Shang-Chi and the Legend of the Ten Rings (2021)        92%        \n 8 Guardians of the Galaxy                   (2014)        92%        \n 9 Spider-Man: Far From Home                 (2019)        91%        \n10 Marvel's the Avengers                     (2012)        91%        \n# ℹ 26 more rows\n\nNext, I wanted to clean up the data in preparation for the types of visualisations I wanted to make. When looking at the rotten_data, we can see that since the data was scraped from text, it has been outputted as character variables. This makes it more difficult to display the data on a numerical scale in our ggplots because R will read every meter score as a new category. To fix this, I used the str_sub function in combination with parse_number to mutate new versions of year_released and meter_score that are read as numbers. Now, our cleaned data is looking ready for analysis!\n\n\nShow code\n\n# CLEANING THE DATA\n\ncleaned_data <- rotten_data %>%\n  mutate(year_released = year_released %>% str_sub(1, 5) %>% parse_number()) %>%\n    mutate(meter_score = meter_score %>% str_sub(1, 2) %>% parse_number()) %>%\n mutate(phase = ifelse(year_released > 2018,\n                                \"Post-Endgame\",\n                                \"Pre-Endgame\")) \n\nprint(cleaned_data)\n\n# A tibble: 36 × 4\n   movie_title                         year_released meter_score phase\n   <chr>                                       <dbl>       <dbl> <chr>\n 1 Black Panther                                2018          96 Pre-…\n 2 Avengers: Endgame                            2019          94 Post…\n 3 Iron Man                                     2008          94 Pre-…\n 4 Thor: Ragnarok                               2017          93 Pre-…\n 5 Spider-Man: No Way Home                      2021          93 Post…\n 6 Spider-Man: Homecoming                       2017          92 Pre-…\n 7 Shang-Chi and the Legend of the Te…          2021          92 Post…\n 8 Guardians of the Galaxy                      2014          92 Pre-…\n 9 Spider-Man: Far From Home                    2019          91 Post…\n10 Marvel's the Avengers                        2012          91 Pre-…\n# ℹ 26 more rows\n\nThe next step was to combine this data with some images we will get using web scraping! To scrape an image rather than text, we have to look for what we want under an element, such as the class name, and search for the source to give us the image’s URL.\n\n\nShow code\n\n# FILM POSTERS VS CRITICS SCORE\nposters <- read_html(rotten_tomatoes) %>%\n  html_elements(\".article_poster\") %>%\n  html_attr(\"src\") \n\n\nNow, we have a data object of MCU poster URLs. Using a technique similar to my magick image in my Google Forms project, I used the paste function to paste the meter_score of each film from the rotten_data into a gif. This gif will read images from the poster object we created to create a cycling gif of each marvel movie poster accompanied by their rotten tomatoes meter score.\n\n\nShow code\n\n# ANIMATED GIF\n\npaste <- paste(rotten_data$meter_score) \n\nposter_gif <- image_read(posters) %>%\n  image_join() %>%\n  image_scale(400) %>%\n  image_annotate(paste, size = 20, gravity = \"center\", font = \"Impact\", color = \"white\", boxcolor = \"black\") %>%\n  image_animate(fps = 0.8) \n\nposter_gif\n\n\n\nLooking awesome! Now it’s time for some analysis! We will bring back the cleaned data set from earlier to display our data.\n\n\nShow code\n\n# AUDIENCE SCORE PRE AND POST ENDGAME\n\nggplot(data = cleaned_data) +\n    geom_density(aes(x = meter_score,\n                   fill = phase,\n                   alpha = 0.7))  +\n\n\n  labs(title = \"Is Marvel dying after the Infinity Saga?\",\n       subtitle = \"An analysis of audience opinion pre and post Avergers: Endgame\",\n       x = \"Audience Meter Score (%)\",\n       caption = \"Source: Natasha Munn 2024\",\n       fill = \"Movie Release\") +\n  \n  scale_alpha(guide = 'none') +\n  \n  scale_fill_manual(values = c(\"#1538C8\", \"#992C26\")) +\n\n\ntheme_classic () +\n  \n  theme(panel.background = element_rect(fill = \"#F4ECEC\"),\n    plot.background = element_rect(fill = \"#F4ECEC\"),\n    legend.background = element_rect(fill = \"#F4ECEC\"),\n    legend.box.background = element_rect(fill = \"#F4ECEC\"),\n    axis.text.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        axis.title.y = element_blank()) \n\n\n\nAs we can see, there is a significant shift in the weighting of meter score for movies before the release of Avengers: Endgame compared to after. The meter score for movies released Pre-Endgame peaks strongly at around 90%, while the Post-Endgame data lacks any distinct shape or trend. While there is a slightly rounded point at the 80-85% mark, the data has much more variation and is pulled down by the 50-60% meter scores.\nIt is essential to mention that we have more films in the Pre-Endgame group compared to the Post-Endgame group. This is because the Infinity Saga only ended in 2019, so we have a bit of catching up to do before we can evaluate the full effect of Marvel’s Post-Endgame slump. However, it is safe to say that the last five years of Marvel content still fails to compete with the impressive collection of films that came before it.\n\n\nShow code\n\n# AUDIENCE SCORE V.S. YEAR RELEASED\n\nggplot(data = cleaned_data) +\n    geom_smooth(aes(x = year_released,\n                   y = meter_score))  +\n  \ngeom_point(data = cleaned_data,\n            aes(x = year_released, y = meter_score),\n            colour = \"#992C26\",\n             size = 2,\n             shape = 20) +\n\n  \n    labs(title = \"Do we still like Marvel Movies?\",\n       subtitle = \"A glimpse into audience meter scores over the years\",\n       x = \"Year Released\",\n       y = \"Audience Meter Score (%)\",\n       caption = \"Source: Natasha Munn 2024\") + \n  \n\ntheme_classic () +\n  \n  theme(panel.background = element_rect(fill = \"#F4ECEC\"),\n    plot.background = element_rect(fill = \"#F4ECEC\"),\n    legend.background = element_rect(fill = \"#F4ECEC\"),\n    legend.box.background = element_rect(fill = \"#F4ECEC\")) \n\n\n\n\n\nShow code\n\n# BOX OFFICE DATA\nurl <- \"https://docs.google.com/spreadsheets/d/e/2PACX-1vSY_etLgncoCxuo7tk289mOko6vroraHNIkeLHTny8UirK628SUEwWXkHC_Hw80qKr1GImUrPLxGfN3/pub?output=csv\"\n\nbox_office_data <- read_csv(url) %>%\n  rename(worldwide_gross_mil = 4,\n         budget_recovered_percent = 5,\n         critic_score_percent = 6,\n         audience_score_percent = 7,\n         audience_critic_percent_deviance = 8,\n         domestic_grossmil = 10,\n         int_gross_mil = 11,\n         opening_weekend_mil = 12,\n         second_weekend_mil = 13,\n         firstvssecond_weekend_dropoff = 14,\n         opening_weekend_gross_percent = 15,\n         domestic_gross_percent = 16,\n         int_gross_percent = 17,\n         budget_opening_weekend_percent = 18) %>%\n  arrange(critic_score_percent)\n\n\nThis data set gives us a ton of helpful information to choose from! I’ll focus on the worldwide gross at the box office and compare this to the superhero franchise to which the film is attached. Then, we can better understand who audiences are more likely to pay to see in the MCU and perhaps get an idea of who audiences would like to see more of in the future.\n\n\nShow code\n\n# BOX OFFICE BY SUPERHERO\n\nbox_office_plot <- ggplot(box_office_data) +\n  geom_col(aes(y = category,\n               x = worldwide_gross_mil,\n                fill = category))  +\n  \n  scale_fill_manual(\n    values = c(\"Ant-Man\" = \"#EBCA24\",\n            \"Captain America\"    = \"#496BE0\",\n            \"Avengers\" = \"#05588A\",\n            \"Spider-Man\" = \"#E50A0A\",\n            \"Unique\" = \"#458A05\",\n            \"Thor\" = \"#E59C0A\",\n            \"Black Panther\" = \"black\",\n            \"Dr Strange\" = \"#45046F\",\n            \"Iron Man\" = \"#E05249\",\n            \"Deadpool\" = \"#6E0707\",\n            \"Guardians\" = \"#8F0AE5\")) +\n\n  \n\n  labs(title = \"Who's your favourite superhero?\",\n       subtitle = \"What Marvel franchise is making the most at the box office??\",\n       x = \"Worldwide Gross (millions)\") +\n    \ntheme_classic () +\n  \n  theme(panel.background = element_rect(fill = \"#F4ECEC\"),\n    plot.background = element_rect(fill = \"#F4ECEC\"),\n        axis.ticks.y = element_blank(),\n        axis.title.y = element_blank(),\n        legend.position = \"none\")\n\nbox_office_plot\n\n\n\nWell, it is clear that we give the Avengers films the most love in the cinema! The Spiderman franchise is another fond favourite of ours. Perhaps these are the superhero films that Marvel fans want to see more of in the next phase of the MCU because they are clearly guaranteed box-office success!\nThis has been my favourite project to work on so far! The data context was so fun, and I can’t wait to explore more in the future!\n\n\n\n",
    "preview": "posts/2025-07-03-webscraping-part-2-obtaining-image-data-from-digital-sources/webscraping-part-2-obtaining-image-data-from-digital-sources_files/figure-html5/unnamed-chunk-6-1.png",
    "last_modified": "2025-07-03T21:38:31+12:00",
    "input_file": {}
  },
  {
    "path": "posts/2025-07-03-webscraping-part-1-obtaining-text-data-from-digital-sources/",
    "title": "Webscraping Part 1: Obtaining Text Data from Digital Sources",
    "description": "Web scraping text and experimenting with inline code!",
    "author": [
      {
        "name": "Natasha Munn",
        "url": {}
      }
    ],
    "date": "2024-07-18",
    "categories": [],
    "contents": "\nKia ora! Today, I will be exploring a method of data collection that is new to me and that I wish to explore more: Web scraping. Web scraping is the automated process of copying data from a webpage to store it in a database. It is vital to do this ethically. Just because information is online does not make it ours to scrape at will.\nThere are two main methods for checking if a website is scrapable. One is by checking the Iterms and conditions*. You want to ensure there is nothing against the use of robots or anything against using an automated process to collect data.\nYou also want to check the website’s robots.txt file and carefully read what URLs are allowed and disallowed to be scraped.\nTo accomplish web scrapping, I first need to load the tidyverse and rvest libraries.\n\n\nShow code\n\nlibrary(tidyverse)\nlibrary(rvest)\n\n\nFor this project, I will be scrapping information from the official Beehive Government website. As mentioned above, I checked the terms and conditions of this webpage and the robots.txt file. There is nothing in its terms and conditions against web scraping, and the robots txt file allowed for scrapping the minister’s release URLs. The minister I’ve selected is Hon. Simeon Brown. These are the ideas I wanted to explore in the data:\nWord count for both release titles and release content. How do they vary in length?\nThe releases have a lot of quotation marks from people’s quotes. How often do the releases quote someone on average?\nMany of the releases have the word “government” in them. How frequent is the word across releases?\nAfter saving the URL as an object in R Studio, I used the read_html function combined with html_elements and attr to gather information on release titles and content. I got the class information to obtain these by inspecting the webpage on Google.\n\n\nShow code\n\n# SCRAPING RELEASE TITLES AND CONTEXT\n\nurl <- \"https://www.beehive.govt.nz/minister/hon-simeon-brown\"\n\npages <- read_html(url) %>%\n  html_elements(\".release__wrapper\") %>%\n  html_elements(\"h2\") %>%\n  html_elements(\"a\") %>%\n  html_attr(\"href\") %>%\n  paste0(\"https://www.beehive.govt.nz\", .)\n\npage_url <- pages[1]\n\npage <- read_html(page_url)\n\nrelease_title <- page %>%\n  html_elements(\".article__title\") %>%\n  html_text2()\n\nrelease_content <- page %>%\n  html_elements(\".prose\") %>%\n  html_text2()\n\n\nThen I created a function called get_release in which I web scrape each page-URL for all of the HTML elements under the class name .article_title and .prose to be returned in a tibble table under the variables release_title and release_content. I will call this my release data.\nRemember that it’s essential to add a sys.sleep into your code when web scrapping to give the website breaks between scraps to avoid any crashes.\n\n\nShow code\n\n# GET RELEASE\n\nget_release <- function(page_url){\n  Sys.sleep(2)\n  print(page_url)\n  page <- read_html(page_url)\n  \n  release_title <- page %>%\n    html_elements(\".article__title\") %>%\n    html_text2()\n  \n  release_content <- page %>%\n    html_elements(\".prose\") %>%\n    html_text2()\n  \nreturn(tibble(release_title, release_content))  \n}\n\nrelease_data <- map_df(pages, get_release)\n\n[1] \"https://www.beehive.govt.nz\"\n\nNow, I have the data frame release data to play around with to help me answer my questions. I used the mutate function from tidyverse to turn my questions into answers and created a data object for each one.\nThe benefit of putting these values as objects is that you can use them for inline R code when writing your summaries, for example. The following summary is written using inline code to showcase the release features.\n\n\nShow code\n\n# INLINE CODE\n\nmean_title_length <- release_data %>%\n  mutate(title_length = str_count(release_title, \"\\\\S+\")) %>%\n  pull(title_length) %>%\n  mean() %>%\n  round(0)\n\nmean_content_length <- release_data %>%\n  mutate(content_length = str_count(release_content, \"\\\\S+\")) %>%\n  pull(content_length) %>%\n  mean() %>%\n  round(0)\n\ntotal_government_mention <- release_data %>%\n  mutate(content_lowercase = str_to_lower(release_content)) %>% \n  mutate(government_mention = str_count(content_lowercase, \"government\")) %>%\n  pull(government_mention) %>%\n  sum %>%\n  round(0)\n\nmean_quotes <- release_data %>%\n  mutate(num_quotes = str_count(release_content, \"“\")) %>%\n  pull(num_quotes) %>%\n  mean() %>%\n  round(0)\n\n\nThe first feature I investigated was the release title. I was interested in how the titles varied, and I discovered that the mean word length across the titles was NaN words. Moving onto the release content, I wanted to figure out the same thing but for the content word count. I discovered that the mean word length across the releases was NaN words.\nThen, I wanted to get more specific. When glaring over the releases, I noticed the word government featured a lot, understandably, and I wondered how often it appeared across the releases. I found out that the word “government” featured 0 times across the releases. I also noticed that many quotes were featured in the releases, so I coded to detect the number of opening quotations the releases had (I only coded to detect opening quotations because I knew that for every opening quotation, there would be a closing quotation.) I discovered that the mean number of quotes across the releases was NaN quotes.\nUsing inline code is a great way to produce summary statistics when working with web scrapping, as it allows for changes and updates in the data. Every time you scrape your webpage, you may get new info and inline code accounts for this, giving you the updated version every time.\nI will definitely be utilising web scraping more in future projects because it is such an exciting tool to use. In this post I only focused on scraping text from a webpage. I will be splitting this post into two parts and I will focus on scraping images in part 2, so keep an eye out!\n\n\n\n",
    "preview": {},
    "last_modified": "2025-07-03T21:29:49+12:00",
    "input_file": {}
  },
  {
    "path": "posts/2025-07-03-creating-data-stories-using-ggplot-and-youtube-channel-data/",
    "title": "Creating Data Stories using Ggplot and YouTube Channel Data",
    "description": "Visualising comparisons between two YouTube channels from data obtained from the YouTube API.",
    "author": [
      {
        "name": "Natasha Munn",
        "url": {}
      }
    ],
    "date": "2024-07-13",
    "categories": [],
    "contents": "\nKia Ora! Today I will explore YouTube channel data using the YouTube API via Apps Script, create visualisations, and turn them into a dynamic and informative data story we can showcase. Let’s get started!\nThis project will use functions from the tidyverse and magick packages.\n\n\nShow code\n\nlibrary(tidyverse)\nlibrary(magick)\n\n\nThe two channels I chose to investigate were @cut and @jack_edwards, which are both channels that I watch regularly. I chose them because I knew they had a large number of videos published on their channels, and both have been posting videos for at least a couple of years (@jack_adwards for four years and @cut for ten years), so I thought their channels would be good to examine data over time.\nBefore I accessed the YouTube data, I had two ideas: to make a visualisation that examined video engagement (e.g., likes, views, comments) and a visualisation that examined a feature of the video title. Both of these ideas would be interesting to compare data between the two YouTube channels, as one channel may title its videos differently or have greater user engagement.\nIn the end, I decided to start with overall habits and focus on using the data from each channel as one whole piece of YouTube data for the first plot, then go deeper and compare the two channels and their specific features.\nIt’s time to obtain my data from the Youtube API, which I did by imputing the channel’s ID numbers. I collected 200 rows of data (100 from each channel). After running this, I outputted my data as a Google Sheet. I published this as a CSV to read into R Studio and manipulate.\n\n\nShow code\n\n# API to CSV\n\nyoutube_data <- read_csv(\"https://docs.google.com/spreadsheets/d/e/2PACX-1vRZU1fILmoBM9hALzbBO1VldP-TQtsk-VOYB-bI5-asLrgK7Qn6M6LU7pgL9BxWImAr36ybX4ja_chA/pub?output=csv\") %>%\n  mutate(video_length_type = ifelse(duration > 600,\n                                \"long video\",\n                                \"short video\")) %>%\n  mutate(title_length = str_count(title, \" \") + 1) %>%\n  mutate(year_released = datePublished %>% str_sub(1, 4) %>% parse_number()) \n\n\nMy first plot is a geom_point plot that investigates view count, specifically mean view count, and how it changes over time to see if we are watching more or less YouTube than we used to. I chose geom_point because I like that you can see specific dot clusters, unlike a bar chart. I initially used geom_count so you could see the distribution even more clearly, but I found it looked too messy. Geom_point is also a good way of representing the mean views for each year.\n\n\nShow code\n\n# YEAR VS MEAN VIEW COUNT \n\nviews_data <- youtube_data %>%\n  group_by(year_released) %>%\n  summarise(mean_views = mean(viewCount, na.rm = TRUE)) \n\nplot1 <- ggplot() +\n  \ngeom_point(data = youtube_data,\n            aes(x = viewCount, y = year_released)) +\n  \n  geom_point(data = views_data,\n             aes(x = mean_views, y = year_released),\n             colour = \"#992C26\",\n             size = 5,\n             shape = 18) +\n  \n  labs(title = \"Are we watching more Youtube?\",\n       subtitle = \"How Youtube engagement is changing over the years\",\n       x = \"View Count\",\n       y = \"Year Posted\") +\n  \n  theme_minimal() +\n  \n  scale_y_continuous(breaks = seq(2014, 2024, 1))\n  \nggsave(\"plot1.png\", width = 6, height = 4, units =\n         \"in\")\n\n\nplot1\n\n\n\nMy second plot is a geom_density plot examining the title length for each channel and whether or not the video duration is short or long. After looking at views for YouTube overall, looking at the titles of videos was a good next step. I chose title length to see if these channels preferred longer or shorter titles, perhaps because they think one will grab our attention more. I split them into long and short videos because I thought there might be a connection. Possibly longer videos have longer titles? I chose a density graph because it would look good visually when layering two categories (the two channel names).\nI initially tried to add a vline to this plot to portray the mean like count for each category, short and long videos, by grouping and summarising. Still, I was having issues with my code and importing this different data frame into the vline layer. Ultimately, I left it out because the two mean lines felt like they were taking away from the density plot.\n\n\nShow code\n\n# TITLE LENGTH VS VIDEO LENGTH BY CHANNEL\n\nplot2 <- ggplot(youtube_data) +\n  geom_density(aes(x = title_length,\n                   fill = channelName))  +\n  \n  facet_wrap(vars(video_length_type)) +\n  \n  scale_fill_manual(values = c(\"#EE544D\", \"#992C26\")) +\n  \n  \n  labs(title = \"What grabs our attention in a title?\",\n       subtitle = \"And do longer videos tend to have longer titles?\",\n       x = \"Title Length\") +\n  \n  theme_minimal() +\n  theme(axis.text.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        axis.title.y = element_blank())\n\nggsave(\"plot2.png\", width = 6, height = 4, units =\n         \"in\")\n\nplot2\n\n\n\nMy final plot is a geom_boxplot, and I am looking at the comment count. After examining titles, I wanted to look further at the actual interactions with the video after we click on it (comment count). I used a boxplot for this plot because its shape captures the data’s variation or lack thereof (e.g., the @cut data has a wider box, while the @jack_adwards data is barely visible). I think the fact that you can’t see the @jack_edwards plot is statistically meaningful, as it clearly demonstrates how slight the variation for the channel’s comment count is.\n\n\nShow code\n\n# COMMENTS VS. CHANNELS \n\ncomment_data <- youtube_data %>%\n  count(commentCount, channelName) \n\nplot3 <- ggplot(comment_data) +\n  geom_boxplot(aes(x = channelName,\n               y = commentCount,\n               fill = channelName))  +\n  \n  scale_fill_manual(values = c(\"#EE544D\", \"#992C26\")) +\n  \n\n  labs(title = \"What channel gets the most engagement overall?\",\n       subtitle = \"Comparing comment count for @cut vs @jack_edwards?\",\n       x = \"Comment Count\") +\n    \n    theme_minimal() +\n  theme(axis.text.y = element_blank(),\n             axis.ticks.y = element_blank(),\n             axis.title.y = element_blank())\n    \nplot3\n\n\nShow code\n\nggsave(\"plot3.png\", width = 6, height = 4, units =\n         \"in\")\n\n\nNext, I wanted a creative way to display my findings. I used the Magick package to turn these visualizations into a slideshow!\nI used the magick package features to load the plots that I saved to my computer and wrote up some descriptions of their key features to accompany them. For more information on using the magick package functions, I recommend reading my post on manipulating images as I go into more detail about magick functions there. Here is the code for my frames.\n\n\nShow code\n\npink_and_red_theme <- c(\"#F3C8C8\", \"#F1A4A4\", \"#EE544D\", \"#992C26\")\n\n\n# DATA STORY\n\n# FRAME 1\nintroduction <- \"The following presentation explores the different features of videos posted on YouTube by @cut and @jack_edwards, as well as how we interact with them!\" %>%\n  str_wrap(40)\n\nintro_slide <- image_blank(600, 400, color = \"#F1A4A4\") %>%\n  image_annotate(text = introduction,\n                size = 30, gravity = \"center\", color = \"black\", font = \"Georgia\")\n\nkermit <- image_read(\"https://static.wikia.nocookie.net/muppet/images/1/11/Kermit_on_q_radio.jpg/revision/latest?cb=20111117210116\") %>%\n  image_scale(750) \n\n\nframe1 <- c(intro_slide, kermit) %>%\n  image_append(stack = FALSE) %>%\n  image_crop(\"1180x380\") %>%\n  image_border(\"#992C26\", \"10x10\")\n\n# FRAME 2\n\nplot1 <-  image_read(\"plot1.png\") %>%\n  image_scale(\"580\") %>%\n  image_annotate(\"The highest mean view count was in 2014!\", location = \"+240+320\", color = \"black\", size = 15, weight = 1000, boxcolor = \"#F1A4A4\", font = \"Georgia\")\n\ndescription_plot1 <- \"My first visualisation examines the overall views of the YouTube videos over the past ten years and shows us that the mean view count for the channels is getting lower each year.\" %>%\n  str_wrap(40)\n\nplot1_slide <- image_blank(600, 400, color = \"#F1A4A4\") %>%\n  image_annotate(text = description_plot1, size = 30, gravity = \"center\", font = \"Georgia\")\n\nframe2 <- c(plot1, plot1_slide) %>%\n  image_append(stack = FALSE) %>%\n  image_crop(\"1180x380\") %>%\n  image_border(\"#992C26\", \"10x10\")\n\n# FRAME 3\n\nplot2 <-  image_read(\"plot2.png\") %>%\n  image_scale(\"580\") %>%\n  image_annotate(\"<- Look at that spike for @cut!\", location = \"+130+150\", color = \"black\", size = 15, weight = 1000, boxcolor = \"#F1A4A4\", font = \"Georgia\")\n\n\ndescription_plot2 <- \"My second visualisation investigates the titles of videos published by @cut and @jack_edwards by comparing the word count of their titles, and we can see that the dispersal for long videos, especially in @cut, is more varied than that of short videos.\" %>%\n  str_wrap(40)\n\nplot2_slide <- image_blank(600, 400, color = \"#F1A4A4\") %>%\n  image_annotate(text = description_plot2, size = 30, gravity = \"center\", font = \"Georgia\")\n\nframe3 <- c(plot2, plot2_slide) %>%\n  image_append(stack = FALSE) %>%\n  image_crop(\"1180x380\") %>%\n  image_border(\"#992C26\", \"10x10\")\n\n# FRAME 4\n\nplot3 <-  image_read(\"plot3.png\") %>%\n  image_scale(\"580\") %>%\n  image_annotate(\"You can barely see the distribution for @jack_edwards!\", location = \"+130+250\", color = \"black\", size = 15, weight = 1000, boxcolor = \"#F1A4A4\", font = \"Georgia\")\n\n\ndescription_plot3 <- \"In my final visualisation where I examine comment count for each channel, we can see that the engamenet for @cut is greater and much more varied compared to @jack_edwards.\" %>%\n  str_wrap(40)\n\nplot3_slide <- image_blank(600, 400, color = \"#F1A4A4\") %>%\n  image_annotate(text = description_plot3, size = 30, gravity = \"center\", font = \"Georgia\")\n\nframe4 <- c(plot3, plot3_slide) %>%\n  image_append(stack = FALSE) %>%\n  image_crop(\"1180x380\") %>%\n  image_border(\"#992C26\", \"10x10\")\n\n# FRAME 5\n\nconclusion <- \"Overall, I learned that @cut's data was more varied, while @jack_edwards's data was much more clustered together. Since @jack_edwards had only been posting for 4 years, and @cut 10 years, the greater variation in 2014-2019 can be attributed to @cut, implying that their views data tends to be more varied than @jack_edwards. This story continues when examining my other two plots, with @cut having much more variation than @jack_edwards. In conclustion, I predict this variation is from @cut being a more popular channel and having more viral videos than @jack_edwards.\" %>%\n  str_wrap(80)\n\nframe5 <- image_blank(1200, 400, color = \"#F1A4A4\") %>%\n  image_annotate(text = conclusion,\n                 size = 30, gravity = \"center\", color = \"black\", font = \"Georgia\") %>%\n  image_crop(\"1180x380\") %>%\n  image_border(\"#992C26\", \"10x10\")\n\n\nAfter creating each frame, I put them into a vector of frames and made a moving data story using image_animate. I LOVED how it turned out! Look to see the key findings of the YouTube channel data, and enjoy!\n\n\nShow code\n\n# ANIMATION\n\nframes <- c(frame1, frame2, frame3, frame4, frame5) %>% \n  image_animate(fps = 0.1) %>%\n  image_morph(frames = 0.5)\n\ndata_story <- frames \n\ndata_story\n\n\nShow code\n\nimage_write(data_story, \"data_story.gif\")\n\n\n\n\n\n",
    "preview": "posts/2025-07-03-creating-data-stories-using-ggplot-and-youtube-channel-data/creating-data-stories-using-ggplot-and-youtube-channel-data_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2025-07-03T21:28:14+12:00",
    "input_file": {}
  },
  {
    "path": "posts/2025-07-03-exploring-sunflowers-in-json-data/",
    "title": "Exploring Sunflowers in JSON Data",
    "description": "Using Pixabay to create of JSON dataset and manipulating it in RStudio!",
    "author": [
      {
        "name": "Natasha Munn",
        "url": {}
      }
    ],
    "date": "2024-07-08",
    "categories": [],
    "contents": "\nWelcome back! Today, I will document my experience working with and interpreting JSON Data for the first time. JSON stores data in memory and can exchange data between systems and APIs. It is also human and computer-readable! Today, I will obtain my JSON data based on Pixabay images from the following Pixabay API explorer.\nFirst, let’s load tidyverse, jsonlite, and the magick package.\n\n\nShow code\n\nlibrary(tidyverse)\nlibrary(jsonlite)\nlibrary(magick)\n\n\nTo begin, I must narrow down my data frame. I searched for photos using the words “pretty” and “sunflower” in my query. I chose these words because sunflowers are my favourite type of flower, and I wanted to see some pretty ones! I was also interested in the range of photo types that would be returned (e.g., life-like or cartoon flowers and background or static image.)\nThese are the first few rows of results that come up when I search pretty sunflower in Pixabay’s royalty-free images to give you an example of what I’m working with:\n\nAfter putting my keywords into a query in my API, I obtained my JSON data set, which I will put into a data frame called pixabay_photo_data.\nNow, it’s time to manipulate my data set. I filtered my data frame to limit the data to around 50 rows, selected the most interesting variables to explore, and mutated some new ones. This filtered dataset will be called selected_photos.\nI created a variable called “petal,” which tells us whether or not the photo has the word petal as one of its tags, a variable telling us the number of characters in the user’s name, and a variable for the number of characters in the tagged word.\nI also separated the rows of data so that every tagged word will show up as a different entity in the data (e.g., if one photo has the tagged words “flower” and “pretty,” it will show up twice in the dataset - once for each word.)\n\n\nShow code\n\n# MANIPULATE DATA FRAME TO CREATED \"SELECTED_PHOTOS\"\n\njson_data <- fromJSON(\"pixabay_data.json\")\npixabay_photo_data <- json_data$hits\n\nselected_photos <- pixabay_photo_data %>%\n  filter(id > 7000000) %>%\n  select(previewURL, pageURL, tags, imageSize, views, downloads, likes, comments, user) %>%\n  separate_rows(tags, sep = \", \") %>%\n  mutate(petal_tag = ifelse(str_detect(str_to_lower(tags),\n                                       \"petal\"),\n                            \"petal tagged\",\n                            \"petal not tagged\")) %>%\n  mutate(user_length = nchar(user)) %>%\n  mutate(tag_char = nchar(tags)) \n\nwrite_csv(selected_photos, \"selected_photos.csv\")\n\n\n\n\nShow code\n\n# SUMMARY STATS\n\nmax_likes <- selected_photos$likes %>% max(na.rm = TRUE)\n\nmin_downloads <- selected_photos$downloads %>% min(na.rm = TRUE)\n\nmean_comments <- selected_photos$comments %>% median(na.rm = TRUE)\n\nmax_tag_char <- max(nchar(selected_photos$tags))\n\n\nHere are some key findings of the data:\nThe maximum number of likes on a photo is 158.\nThe minimum number of downloads on a photo is 4011.\nThe mean number of comments on a photo is 17.5.\nThe longest tagged word has a total of 17 characters.\nI also learned that when we group the data based on whether the word “petal” is tagged or not, the max tagged word for photos without a petal tag is 17 characters, compared to the images where petal is tagged, which only have a max tagged word of 7 characters.\n\n\nShow code\n\n# MAX CHARACTER BY PETAL TAG\n\nselected_photos %>%\n  group_by(petal_tag) %>%\n  summarise(max_tagged_word = max(nchar(tags))) %>%\n  print()\n\n# A tibble: 2 × 2\n  petal_tag        max_tagged_word\n  <chr>                      <int>\n1 petal not tagged              17\n2 petal tagged                   6\n\nNow, let’s create something with this data. I will be using the variable previewURL to create an animated GIF with the magick package that cycles through each photo and displays its tagged word. Here is a table of the URLs we will be using:\n\n\nShow code\n\n# HTML TABLE\n\npixabay_photo_data %>%\n  select(pageURL) %>%\n  knitr::kable() \n\npageURL\nhttps://pixabay.com/photos/sunflower-nature-flora-flower-3113318/\nhttps://pixabay.com/photos/sunflower-blossom-bloom-bright-5194553/\nhttps://pixabay.com/photos/sunflower-flower-plant-petals-1536088/\nhttps://pixabay.com/photos/sunflower-yellow-flower-pollen-1627193/\nhttps://pixabay.com/photos/bloom-sunflower-blossom-close-up-1866760/\nhttps://pixabay.com/photos/sunflower-petals-leaves-head-hang-6545962/\nhttps://pixabay.com/photos/sunflower-flower-yellow-flower-3540266/\nhttps://pixabay.com/photos/sunflower-yellow-flowers-nature-4866445/\nhttps://pixabay.com/photos/flower-sunflower-yellow-petals-4476373/\nhttps://pixabay.com/photos/sunflower-flower-plant-1421011/\nhttps://pixabay.com/photos/sunflower-flower-yellow-flower-3536155/\nhttps://pixabay.com/photos/sunflower-flower-botany-petals-3614728/\nhttps://pixabay.com/photos/flower-sunflower-petals-blossom-5459972/\nhttps://pixabay.com/photos/sunflower-flower-yellow-flower-6546993/\nhttps://pixabay.com/photos/sunflower-flower-petals-nature-4641930/\nhttps://pixabay.com/photos/flower-sunflower-botany-macro-5266745/\nhttps://pixabay.com/photos/sunflower-flower-plant-petals-4415802/\nhttps://pixabay.com/photos/sunflowers-sunflower-field-woman-3640938/\nhttps://pixabay.com/photos/flower-sunflower-petals-5470156/\nhttps://pixabay.com/photos/sunflower-flower-yellow-flower-3759285/\nhttps://pixabay.com/photos/sunflower-flower-plant-62049/\nhttps://pixabay.com/photos/ladybug-insect-ladybird-beetle-3475779/\nhttps://pixabay.com/photos/sunflowers-yellow-flowers-3526901/\nhttps://pixabay.com/photos/sunflower-flower-yellow-flower-6520055/\nhttps://pixabay.com/photos/sunflower-petals-flower-1521864/\nhttps://pixabay.com/photos/sunflower-flower-plant-bloom-290496/\nhttps://pixabay.com/photos/sunflower-flower-yellow-flower-3585282/\nhttps://pixabay.com/photos/sunflower-bud-flower-yellow-flower-3564207/\nhttps://pixabay.com/photos/sunflower-blossom-bloom-pollen-2511961/\nhttps://pixabay.com/photos/sunflower-macro-bee-pollen-petals-4399089/\nhttps://pixabay.com/photos/sunflower-bee-pollinate-pollen-6212201/\nhttps://pixabay.com/photos/sunflower-flower-blossom-bloom-1621990/\nhttps://pixabay.com/photos/sunflower-flower-yellow-plant-7385242/\nhttps://pixabay.com/photos/sunflower-flower-pollen-blossom-6522150/\nhttps://pixabay.com/photos/flower-sunflower-bee-yellow-7421594/\nhttps://pixabay.com/photos/grasshopper-insect-sunflower-flower-7575278/\nhttps://pixabay.com/photos/sunflower-flower-yellow-flower-3382378/\nhttps://pixabay.com/photos/sunflower-nature-flora-flower-3546383/\nhttps://pixabay.com/photos/sunflower-flowers-yellow-flowers-6515860/\nhttps://pixabay.com/photos/flower-sunflower-plant-disk-flowers-94187/\nhttps://pixabay.com/photos/sunflower-flower-yellow-flower-3759348/\nhttps://pixabay.com/photos/sunflower-insect-flower-flora-7456101/\nhttps://pixabay.com/photos/sunflower-yellow-flower-blossom-1627179/\nhttps://pixabay.com/photos/sunflower-flower-plant-7834580/\nhttps://pixabay.com/photos/sunflower-yellow-flower-bloom-4576573/\nhttps://pixabay.com/photos/sunflower-flower-bee-insect-6545123/\nhttps://pixabay.com/photos/bee-insect-pollinate-pollination-3554567/\nhttps://pixabay.com/photos/sunflower-sunflower-field-flowers-3550693/\nhttps://pixabay.com/photos/hummel-insect-sunflower-pollen-5549231/\nhttps://pixabay.com/photos/honeybee-sunflower-pollination-bee-6975865/\nhttps://pixabay.com/photos/sunflowers-field-sunset-sun-6007847/\nhttps://pixabay.com/photos/sunflower-flower-plant-petals-1127174/\nhttps://pixabay.com/photos/sunflowers-sunflower-field-4400519/\nhttps://pixabay.com/photos/sunflower-field-sunflowers-bright-3512655/\nhttps://pixabay.com/photos/sunflower-bumblebee-pollination-7428212/\nhttps://pixabay.com/photos/sunflowers-sunflower-field-flower-3512656/\nhttps://pixabay.com/photos/sunflower-blossom-yellow-flower-2179011/\nhttps://pixabay.com/photos/sunflowers-flowers-blossoms-plants-4339580/\nhttps://pixabay.com/photos/yellow-flowers-sunflowers-plants-3705716/\nhttps://pixabay.com/photos/nature-sunflowers-sunflower-field-3520280/\nhttps://pixabay.com/photos/sunflower-sunset-nature-summer-5370278/\nhttps://pixabay.com/photos/pretty-woman-portrait-sexy-hands-2165718/\nhttps://pixabay.com/photos/sunflowers-sunflower-yellow-petal-3514915/\nhttps://pixabay.com/photos/flowers-sunflower-petals-flora-7135053/\nhttps://pixabay.com/photos/girl-beauty-portrait-beautiful-4437225/\nhttps://pixabay.com/photos/sunflower-flowers-field-175821/\nhttps://pixabay.com/photos/plant-flower-sunflower-4638604/\nhttps://pixabay.com/photos/sunflower-flowers-flower-bed-3696960/\nhttps://pixabay.com/photos/young-girl-pretty-beauty-hair-422332/\nhttps://pixabay.com/photos/sunflower-yellow-flower-sky-summer-3616249/\nhttps://pixabay.com/photos/sunflower-flower-yellow-flower-7746933/\nhttps://pixabay.com/photos/insect-bee-sunflower-summer-1948684/\nhttps://pixabay.com/photos/sunflower-bud-plant-flora-green-8142430/\nhttps://pixabay.com/photos/portrait-woman-adult-people-pretty-3098319/\nhttps://pixabay.com/photos/sunflower-yellow-pretty-sunflower-1779885/\nhttps://pixabay.com/photos/sunflowers-flowers-yellow-flowers-6677724/\nhttps://pixabay.com/photos/sunflower-heaven-beautiful-blossom-3588378/\nhttps://pixabay.com/photos/black-and-white-young-woman-flower-1526025/\nhttps://pixabay.com/photos/sunflower-faded-close-up-4439775/\nhttps://pixabay.com/photos/sunflower-seeds-sunflower-1213766/\nhttps://pixabay.com/photos/sunflowers-abruzzo-flowers-summer-76119/\nhttps://pixabay.com/photos/sunflower-petals-seeds-summer-8111909/\nhttps://pixabay.com/photos/sunflowers-flowers-yellow-flowers-4351266/\nhttps://pixabay.com/photos/sunflowers-sunflower-field-8180147/\nhttps://pixabay.com/photos/summer-sunflower-flower-sky-cloud-368224/\nhttps://pixabay.com/photos/sunflower-macro-macro-shot-blossom-209613/\nhttps://pixabay.com/photos/sunflower-flower-bloom-yellow-bee-1497092/\nhttps://pixabay.com/photos/sunflower-face-dress-yellow-834987/\nhttps://pixabay.com/photos/sunflowers-yellow-flowers-petals-1853562/\nhttps://pixabay.com/photos/sunflower-yellow-flower-summer-1942825/\nhttps://pixabay.com/photos/rear-girl-back-girls-back-5882411/\nhttps://pixabay.com/photos/sunflower-field-evening-sunflower-2335169/\nhttps://pixabay.com/photos/sunflower-seeds-bird-food-kernels-537652/\nhttps://pixabay.com/photos/sunflower-blossom-bloom-flowers-378270/\nhttps://pixabay.com/photos/sunflower-flower-yellow-flower-2914972/\nhttps://pixabay.com/photos/flower-daisies-blossom-bloom-5038110/\nhttps://pixabay.com/photos/sunflower-flower-blossom-bloom-3647024/\nhttps://pixabay.com/photos/sunflower-flower-helianthus-annuus-2269185/\nhttps://pixabay.com/photos/sunflowers-sunflower-field-flora-11574/\nhttps://pixabay.com/photos/beautiful-woman-portrait-fan-woman-8074997/\nhttps://pixabay.com/photos/yellow-sunflower-flower-round-403172/\nhttps://pixabay.com/photos/sunflower-flower-yellow-plant-450231/\nhttps://pixabay.com/photos/sunflowers-blossom-bloom-yellow-1497365/\nhttps://pixabay.com/photos/woman-asian-beauty-fashion-model-8253239/\nhttps://pixabay.com/photos/sunflower-blossoms-plants-4339701/\nhttps://pixabay.com/photos/sunflower-flower-blossom-bloom-4460354/\nhttps://pixabay.com/photos/sunflower-sunflowers-flower-summer-179010/\nhttps://pixabay.com/photos/sunflower-petals-plant-blossom-6559621/\nhttps://pixabay.com/photos/sunflower-yellow-flower-832793/\nhttps://pixabay.com/photos/sunflower-flower-blossom-bloom-4456236/\nhttps://pixabay.com/photos/sunflower-flower-bumblebee-insect-3763731/\nhttps://pixabay.com/photos/sunflower-field-nature-summer-3540277/\nhttps://pixabay.com/photos/sunflower-plants-fields-agriculture-5395106/\nhttps://pixabay.com/photos/sunflower-flora-garden-flower-3566523/\nhttps://pixabay.com/photos/woman-beauty-model-beautiful-5573135/\nhttps://pixabay.com/photos/sunflowers-flowers-sunflower-field-3790834/\nhttps://pixabay.com/photos/sunflower-yellow-flower-bloom-7271248/\nhttps://pixabay.com/photos/flower-daisies-blossom-bloom-2254866/\nhttps://pixabay.com/photos/sunflower-backlighting-colorful-726978/\nhttps://pixabay.com/photos/sunflower-flower-blossom-bloom-4428709/\nhttps://pixabay.com/photos/animal-bird-songbird-robin-3202073/\nhttps://pixabay.com/photos/sunflower-summer-sun-plant-2548875/\nhttps://pixabay.com/photos/sunflower-flower-yellow-plant-4307839/\nhttps://pixabay.com/photos/woman-eyeglasses-fashion-beauty-5612838/\nhttps://pixabay.com/photos/sunflower-flower-blossom-bloom-4621232/\nhttps://pixabay.com/photos/sunflower-blossom-bloom-yellow-491173/\nhttps://pixabay.com/photos/sunflower-field-clouds-sunflower-50519/\nhttps://pixabay.com/photos/sunflower-flower-blossom-bloom-1556076/\nhttps://pixabay.com/photos/sunflower-flower-blossom-bloom-4584290/\nhttps://pixabay.com/photos/sunflower-flower-blossom-bloom-3289333/\nhttps://pixabay.com/photos/sunflower-sunflower-sprout-1213754/\nhttps://pixabay.com/photos/sunflower-field-sunflower-bud-5399292/\nhttps://pixabay.com/photos/sunflower-flower-blossom-bloom-4509760/\nhttps://pixabay.com/photos/sunflower-flower-blossom-bloom-3647023/\nhttps://pixabay.com/photos/elf-girl-sunflower-pretty-fantasy-1367975/\nhttps://pixabay.com/photos/sunflower-sunny-bright-plant-3526871/\nhttps://pixabay.com/photos/flower-sunflower-botany-blossom-6637076/\nhttps://pixabay.com/photos/woman-pretty-portrait-girl-young-3990680/\nhttps://pixabay.com/photos/flower-daisies-blossom-bloom-5038024/\nhttps://pixabay.com/photos/sunflower-girl-face-sun-summer-2699771/\nhttps://pixabay.com/photos/thailand-sunflower-yellow-farming-1818395/\nhttps://pixabay.com/photos/sunflowers-flower-bloom-yellow-1495136/\nhttps://pixabay.com/photos/sunflowers-fields-cricket-insect-5579060/\nhttps://pixabay.com/photos/sunflower-flower-yellow-1941060/\nhttps://pixabay.com/photos/sunflower-risen-sun-drops-morning-1557101/\nhttps://pixabay.com/photos/sunflower-flower-blossom-bloom-4621233/\nhttps://pixabay.com/photos/sunflower-fields-sunflower-685367/\nhttps://pixabay.com/photos/sunflower-flower-arrangement-2418593/\nhttps://pixabay.com/photos/sunflowers-sunflower-yellow-petal-268015/\nhttps://pixabay.com/photos/sunflowers-sunflower-field-blossoms-4329175/\nhttps://pixabay.com/photos/sunflower-flowers-nature-4393716/\nhttps://pixabay.com/photos/sunflower-yellow-flower-843419/\nhttps://pixabay.com/photos/and-sole-sunflower-autumn-2699293/\nhttps://pixabay.com/photos/merriment-life-summer-sunshine-1349125/\nhttps://pixabay.com/photos/sunflowers-yellow-flower-flora-63758/\nhttps://pixabay.com/photos/sunflower-yellow-nature-bloom-4317727/\nhttps://pixabay.com/photos/sunflower-flower-bud-plant-nature-8210479/\nhttps://pixabay.com/photos/sunflower-nature-plant-flower-3097137/\nhttps://pixabay.com/photos/flower-sunflower-summer-orange-1781064/\nhttps://pixabay.com/photos/sunflower-flower-blossom-bloom-4621237/\nhttps://pixabay.com/photos/sunflower-sunflower-seeds-seeds-3811474/\nhttps://pixabay.com/photos/sunflowers-sunflower-sunflower-field-4998633/\nhttps://pixabay.com/photos/sunflower-field-sunflower-blossom-5407693/\nhttps://pixabay.com/photos/sunflower-blossom-bloom-flower-4492131/\nhttps://pixabay.com/photos/rapeseed-sunflower-field-flowers-5717804/\nhttps://pixabay.com/photos/fall-sunflower-autumn-colors-2580806/\nhttps://pixabay.com/photos/sunflower-balboa-park-closeup-2084688/\nhttps://pixabay.com/photos/sunflower-sunflower-field-bright-3564208/\nhttps://pixabay.com/photos/sunflower-transparent-summer-yellow-3947329/\nhttps://pixabay.com/photos/sunflower-flower-blossom-bloom-4621224/\nhttps://pixabay.com/photos/sunflower-flower-nature-yellow-1345713/\nhttps://pixabay.com/photos/sunflower-flower-blossom-bloom-4394141/\nhttps://pixabay.com/photos/sunflower-flower-blossom-bloom-4360847/\nhttps://pixabay.com/photos/sunflower-bud-blossom-bloom-petals-5389923/\nhttps://pixabay.com/photos/sunflower-blossom-bloom-yellow-4774383/\nhttps://pixabay.com/photos/sunflower-flower-blossom-bloom-4458635/\nhttps://pixabay.com/photos/flower-sunflower-botany-bud-plant-8147267/\nhttps://pixabay.com/photos/poster-frame-wall-desk-sunflower-4110192/\nhttps://pixabay.com/photos/sunflower-flower-nature-sunflower-402168/\nhttps://pixabay.com/photos/great-tit-feed-bird-small-bird-3842265/\nhttps://pixabay.com/photos/sunflower-flower-blossom-bloom-4428708/\nhttps://pixabay.com/photos/sunflowers-windmill-field-farm-1853323/\nhttps://pixabay.com/photos/summer-sunflower-sunset-sunflower-858741/\nhttps://pixabay.com/photos/thailand-sunflower-sky-yellow-1818396/\nhttps://pixabay.com/photos/sunflowers-blossom-bloom-yellow-5349783/\nhttps://pixabay.com/photos/sunflowers-bright-sunny-yellow-3512654/\nhttps://pixabay.com/photos/sunflower-yellow-flower-flower-8128779/\nhttps://pixabay.com/photos/sunflower-yellow-flower-summer-1266456/\nhttps://pixabay.com/photos/sunflower-flower-yellow-flower-2954258/\nhttps://pixabay.com/photos/sunflower-flower-yellow-flower-7442736/\nhttps://pixabay.com/photos/sunflower-plant-yellow-summer-3958790/\nhttps://pixabay.com/photos/animal-squirrel-mammal-wildlife-6573940/\nhttps://pixabay.com/photos/flower-sunflower-karnataka-india-204161/\nhttps://pixabay.com/photos/asia-asian-women-friends-pretty-1822695/\nhttps://pixabay.com/photos/child-summer-sun-sunflower-girl-2615893/\nhttps://pixabay.com/photos/little-boy-sunflower-field-2086910/\nhttps://pixabay.com/photos/sunflower-sunflower-field-yellow-5244710/\nhttps://pixabay.com/photos/sunflower-blue-sky-house-summer-3633082/\nhttps://pixabay.com/photos/sunflower-flower-3750889/\nhttps://pixabay.com/photos/sunflower-profile-yellow-flower-664261/\n\nWoah! That’s a lot of links! I put this into an object called img_urls and used the paste function to put the tagged words for each image into an object we can use in our GIF text.\n\n\nShow code\n\n# ANIMATED GIF \nimg_urls <- selected_photos$previewURL %>% na.omit()\n\npaste <- paste(selected_photos$tags) # knowledge from module 2\n\nsunflower_gif <- image_read(img_urls) %>%\n  image_join() %>%\n  image_scale(400) %>%\n  image_annotate(paste, size = 20, gravity = \"center\", font = \"Impact\", color = \"white\") %>%\n  image_animate(fps = 0.8) # knowledge from module 1\n\nsunflower_gif\n\n\n\nAnd voila! A beautiful display of the images and their corresponding tagged words! As you cycle through them, you’ll notice that some tagged words are more popular. Let’s use ggplot to visualise this.\n\n\nShow code\n\n# SUNFLOWER PLOT\n\ncreativity_plot <- ggplot(data = selected_photos) +\n  geom_jitter(aes(x = downloads,\n                  y = tags)) +\n                    labs(title = \"What words peak our interest?\",\n                         subtitle = \"Comparing what tagged words resulted in number of downloads\",                         caption = \"Source: Natasha Munn\",\n                         x = \"Download Count\",\n                         y = \"Words Tagged\") +\n\ntheme_classic () +\n  \n  theme(panel.background = element_rect(fill = \"#F5CA41\"),\n    plot.background = element_rect(fill = \"#F5CA41\"),\n    legend.background = element_rect(fill = \"#F5CA41\"),\n    legend.box.background = element_rect(fill = \"#F5CA41\")) \n\ncreativity_plot\n\n\n\nIt looks like the words sunflower, petals, and insect are the three most popular among users and are getting the highest number of downloads!\nIt’s been so cool turning image features into data! See you next time!\n\n\n\n",
    "preview": "posts/2025-07-03-exploring-sunflowers-in-json-data/exploring-sunflowers-in-json-data_files/figure-html5/unnamed-chunk-6-1.png",
    "last_modified": "2025-07-03T19:41:15+12:00",
    "input_file": {}
  },
  {
    "path": "posts/2025-07-03-tracking-habits-an-analysis-on-respondents-screen-time/",
    "title": "Tracking Habits: An analysis on respondents screen time",
    "description": "Analyzing data using a combination of Google Forms, Google Sheets and R Studio.",
    "author": [
      {
        "name": "Natasha Munn",
        "url": {}
      }
    ],
    "date": "2024-07-07",
    "categories": [],
    "contents": "\nI love a good Google Form. Therefore, it would be fun to gather data using Forms, analyse it on R Studio and see what we can learn!\nToday, I am investigating device use and screen time to explore the differences in my respondent’s screen time habits (i.e., time spent, devices most used, applications most used).\nMy first step was to create my form. It is vital to consider data ethics when collecting information, so I communicated my purpose to my respondents in my form description. I also clearly stated who was collecting the data, who would have access to the data, and what the data would be used for. I also communicated that their responses would be anonymous and that the only additional identifiable information would be collected would be the date and time they submitted the form.\nI phrased my questions for the respondent only to measure their screen time habits of the last week or ask them to answer the question based on their current stance. I asked the following questions:\nWhich age category best describes you?\nWhich of the following devices do you use on a regular basis? (at least once a week)\nOut of the following list of devices, which one did you use the most in the last week?\nIn the last week, how many hours of screen time did you spend in total?\nWhich platform has taken up the most of your screen time in the last week?\nAre you currently employed\n(if yes to Q6) Is working on a device with a screen an essential part of your job on a weekly basis?\nIn the last week, how many nights have you used a device with a screen directly before bed?\nNow, let’s start investigating. First, we need to load tidyverse, as well as the magick package for a special surprise later on:)\n\n\nShow code\n\nlibrary(tidyverse)\nlibrary(magick)\n\n\nI connected my form to a Google Sheet, which I then published as a CSV file. Then, I used the read_csv function to put my data into a data frame called learning_data. This is the data I will be working with:\n\n\nShow code\n\n# EXTRACTING THE DATA AND CREATING OUR DATAFRAME\n\nurl <- \"https://docs.google.com/spreadsheets/d/e/2PACX-1vRQwki3G6AX9G_3qA-1WBiqXv9wkwXvSLyRsozFDRDu-xAdsimASsZmvAOtt9AAYd1yN926MftmsZrn/pub?gid=147013883&single=true&output=csv\"\n\n# rename data variables\nlearning_data <- read_csv(url) %>%\n  rename(time = 1,\n       age = 2,\n       devices_used = 3,\n       most_common_device = 4,\n       screen_time = 5,\n       most_common_platform = 6,\n       job = 7,\n       device_job = 8,\n       screen_bed = 9)\n\nprint(learning_data)\n\n# A tibble: 24 × 9\n   time              age   devices_used most_common_device screen_time\n   <chr>             <chr> <chr>        <chr>                    <dbl>\n 1 19/03/2024 16:46… 18-25 Mobile Phon… Mobile Phone                20\n 2 19/03/2024 16:47… 46-55 Mobile Phon… iPad or Tablet              10\n 3 19/03/2024 16:47… 18-25 Mobile Phon… iPad or Tablet              28\n 4 19/03/2024 16:48… 18-25 Mobile Phone Mobile Phone                49\n 5 19/03/2024 17:26… 18-25 Mobile Phon… Mobile Phone                17\n 6 19/03/2024 17:53… 18-25 Mobile Phon… Mobile Phone                41\n 7 19/03/2024 18:10… 18-25 Mobile Phon… Mobile Phone                40\n 8 19/03/2024 18:25… 18-25 Mobile Phon… Mobile Phone                 6\n 9 19/03/2024 19:34… 18-25 Mobile Phon… Laptop                      55\n10 19/03/2024 20:07… 18-25 Mobile Phon… Mobile Phone                30\n# ℹ 14 more rows\n# ℹ 4 more variables: most_common_platform <chr>, job <chr>,\n#   device_job <chr>, screen_bed <dbl>\n\nFirst, I discovered that mobile phones are the most used devices, primarily used by the 18-25 age group. We can also see the only person to consider an e-reader their most common device was in the 66 and over age group.\n\n\nShow code\n\n# box plot 1: age v.s. most common device\n\nggplot(data = learning_data) +\n  geom_bar(aes(y = most_common_device, fill = age)) +\n  labs(title = \"Does age change our preference?\",\n       subtitle = \"Comparing the most common device used in different age groups\",\n       caption = \"Source: Natasha Munn 2024\",\n       x = \"Count\",\n       y = \"Device Type\") +\n  \n   theme(panel.background = element_rect(fill = \"#F4ECEC\"),\n    plot.background = element_rect(fill = \"#F4ECEC\"),\n    legend.background = element_rect(fill = \"#F4ECEC\"),\n    legend.box.background = element_rect(fill = \"#F4ECEC\"))\n\n\n\nAnother aspect of the data I was interested in was the question of screen time before bed, as it is when most people are vulnerable to doom scrolling. I discovered that most respondents are on their screens before bed every night!\n\n\nShow code\n\n# box plot 2: age v.s. days of screen time before bed\n\nggplot(data = learning_data) +\n  geom_bar(aes(x = screen_bed, fill = age)) +\n  labs(title = \"Who's on their phone the most at bedtime?\",\n       subtitle = \"Comparing the differences in screen use before bed for different ages\",\n       caption = \"Source: Natasha Munn 2024\",\n       x = \"Days of screentime before bed\",\n       y = \"Count\") +\n\n theme(panel.background = element_rect(fill = \"#F4ECEC\"),\n    plot.background = element_rect(fill = \"#F4ECEC\"),\n    axis.text.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        axis.title.y = element_blank(),\n    legend.background = element_rect(fill = \"#F4ECEC\"),\n    legend.box.background = element_rect(fill = \"#F4ECEC\"))\n\n\n\nThe highest amount of total screen time amongst my respondents is 77 hours. The mean number of days my respondents used a device before bed is 5.7 days. Here are some more exciting finds from my exploration:\nThe most common platform used by my respondents last week was TikTok.\nFor the 16 currently employed respondents, it was more common for a device to be essential to their job on a weekly basis.\nThe most common device among my respondents in the last week was a mobile phone.\nTo finish this report, I incorporated some of the magick packages I looked at in my last post. Check out this GIF I made celebrating my number of survey results! I used the paste function again to input the number of respondents from the learning data into my text. Enjoy!\n\n\nShow code\n\n# meme code\n\nmichael <- image_read(\"https://content.imageresizer.com/images/memes/Michael-Scott-meme-10.jpg\")\n\npaste <- paste(\"Me when I get\", length(learning_data$time), \"responses on my survey\")\n\ntext <- image_blank(1043, 100, color = \"white\") %>%\n  image_annotate(paste, size = 30, gravity = \"center\", font = \"Impact\") \n\n\n#putting the meme together\nmeme <- c(text, michael) %>%\n  image_append(stack = TRUE)\n\nmeme\n\n\n\n\n\n\n",
    "preview": "posts/2025-07-03-tracking-habits-an-analysis-on-respondents-screen-time/tracking-habits-an-analysis-on-respondents-screen-time_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2025-07-03T19:34:19+12:00",
    "input_file": {}
  },
  {
    "path": "posts/2025-07-03-manipulating-images-with-the-magick-package/",
    "title": "Manipulating Images with the Magick Package",
    "description": "Everything Spiderman: Memes, GIFs and Movie Posters Galore!",
    "author": [
      {
        "name": "Natasha Munn",
        "url": {}
      }
    ],
    "date": "2024-07-01",
    "categories": [],
    "contents": "\nBefore I start experimenting features of the Magick Package, let’s load library magick and tidyverse.\n\n\nShow code\n\nlibrary(tidyverse)\nlibrary(magick)\n\n\nFor this project, I wanted to experiment with the Magick Package and manipulate images to create a meme. To begin, I checked out some inspiration online. Most memes comprise at least one text slide and one image slide. I have taken inspiration from the following Spiderman meme, which has two.\n\nNow, let’s start using some magick functions! To create my “spider meme,” I used four separate slides: two for text and two for images. I used the function image_read for the image slides and sized them using image_scale. For the text slides, I used image_black and made text using image_annotate in the classic meme font!\nI used image_append to join each image to its text slide to create two rows, which I then stacked together to create the meme!\n\n\nShow code\n\n# CREATING MEMES WITH MAGICK FUNCTIONS\n\n#cool spidey code\ncoolspider <- image_read(\"https://wallpapers.com/images/featured/4k-spider-man-ph3fw6k03ddbmbmh.jpg\") %>%\n  image_scale(800)\n\n#sad spidey code\nsadspider <- image_read(\"https://static0.srcdn.com/wordpress/wp-content/uploads/2022/12/tobey-maguire-as-spider-man-looking-sad-in-spider-man-3.jpg\")%>%\n  image_scale(800)\n\n#first text\ntext1 <- image_blank(400, 450, color = \"#BD2222\") %>%\n  image_annotate(\"Me preparing to go to uni\", size = 30, gravity = \"center\", font = \"Impact\") \n\n#second text\ntext2 <- image_blank(400, 400, color = \"#BD2222\") %>%\n  image_annotate(\"Me when I actually get there\", size = 30, gravity = \"center\", font = \"Impact\")\n\n#making each row\n\n#first row\ntop_row <- image_append(c(text1, coolspider))\n\n#second row\nbottom_row <- image_append(c(text2, sadspider))\n\n#putting the meme together\nspidermeme <- c(top_row, bottom_row) %>%\n  image_append(stack = TRUE)\n\n#save image\nimage_write(spidermeme, \"spidermeme.png\")\n\nspidermeme\n\n\n\nNow, let’s take this a step further. Not only do I want to create a still image. I want to explore some moving ones. Let’s make some gifs!\n\n\nShow code\n\n# CREATING ANIMATED GIFS USING MAGICK FUNCTIONS\n\n#frame 1\nspidermeme_frame1 <- spidermeme\n\n#frame 2  \ncoolspider <- image_read(\"https://wallpapers.com/images/featured/4k-spider-man-ph3fw6k03ddbmbmh.jpg\") %>%\n  image_scale(800)\n\ndarkspider <- image_read(\"https://www.loverofsadness.net/LOS/images/gallery/main/ff/79_Spiderman%20from%20spiderman%203_unkown.jpg\")%>%\n  image_crop(\"600x300\") %>%\n  image_scale(800) \n\ntext1 <- image_blank(400, 450, color = \"#BD2222\") %>%\n  image_annotate(\"Me preparing to go to uni\", size = 30, gravity = \"center\", font = \"Impact\") \n\ntext2.1 <- image_blank(400, 400, color = \"#BD2222\") %>%\n  image_annotate(\"Not understanding my lectures\", size = 30, gravity = \"center\", font = \"Impact\")\n\ntop_row_frame2 <- image_append(c(text1, coolspider))\nbottom_row_frame2 <- image_append(c(text2.1, darkspider))\n\nspidermeme_frame2 <- c(top_row_frame2, bottom_row_frame2) %>%\n  image_append(stack = TRUE)\n\n#frame 3\ncoolspider <- image_read(\"https://wallpapers.com/images/featured/4k-spider-man-ph3fw6k03ddbmbmh.jpg\") %>%\n  image_scale(800)\n\ncryingspider <- image_read(\"https://static1.srcdn.com/wordpress/wp-content/uploads/2022/11/Peter-Parker-crying-over-Gwen-Stacy-after-her-death.jpg\")%>%\n  image_scale(800)\n\ntext1 <- image_blank(400, 450, color = \"#BD2222\") %>%\n  image_annotate(\"Me preparing to go to uni\", size = 30, gravity = \"center\", font = \"Impact\") \n\ntext2.2 <- image_blank(400, 400, color = \"#BD2222\") %>%\n  image_annotate(\"Bussing home during rushhour\", size = 30, gravity = \"center\", font = \"Impact\")\n\ntop_row_frame3 <- image_append(c(text1, coolspider))\nbottom_row_frame3 <- image_append(c(text2.2, cryingspider))\n\nspidermeme_frame3 <- c(top_row_frame3, bottom_row_frame3) %>%\n  image_append(stack = TRUE)\n\n#frame 4\ncoolspider <- image_read(\"https://wallpapers.com/images/featured/4k-spider-man-ph3fw6k03ddbmbmh.jpg\") %>%\n  image_scale(800)\n\nsleepspider <- image_read(\"https://s2.dmcdn.net/v/IpcIL1OTvnKtdwy0h/x480\") %>%\n  image_scale(800)\n\ntext1 <- image_blank(400, 450, color = \"#BD2222\") %>%\n  image_annotate(\"Me preparing to go to uni\", size = 30, gravity = \"center\", font = \"Impact\") \n\ntext2.3 <- image_blank(400, 450, color = \"#BD2222\") %>%\n  image_annotate(\"At home trying to sleep with assingemnt due\", size = 20, gravity = \"center\", font = \"Impact\")\n\ntop_row_frame4 <- image_append(c(text1, coolspider))\nbottom_row_frame4 <- image_append(c(text2.3, sleepspider))\n\nspidermeme_frame4 <- c(top_row_frame4, bottom_row_frame4) %>%\n  image_append(stack = TRUE)\n\n\nI used the same technique as last time to create a meme, but then created multiple versions of the meme and labeled them as different frames ( I made four frames together). I wanted these four frames to cycle through to create my animated GIF. To do this, I bound the frames together and used the image_animate function at 0.8 frames per second. Here is the final product!\n\n\nShow code\n\n#creating the animation\nframes <- c(spidermeme_frame1, spidermeme_frame2, spidermeme_frame3, spidermeme_frame4)\n\nspideranimation_gif <- frames %>%\n  image_animate(fps = 0.8)\n\nimage_write(spideranimation_gif, \"spideranimation.gif\")\n\nspideranimation_gif\n\n\n\nIt’s time to get creative! Next, I wanted to do something that would make my GIF unique. I decided to combine the elements of the magick package with some handy web scrapping to create an awesome animated movie poster! To do this, I first loaded the rvest library.\n\n\nShow code\n\nlibrary(rvest)\n\n\nUsing the read_html function on the IMDB webpage for Spiderman (2002) taglines, I scrapped using html_elements to obtain all the taglines used for the film. I wanted this information to be used as the tagline for my animated poster. Then I put this data into a tibble table along with the URL of the movie poster.\nThen, I used the paste function to create a vector of the taglines that I could input into my magick image using image_annotate again. And voila! An animated movie poster for Spiderman!\n\n\nShow code\n\n# GETTING CREATIVE WITH THE MAGICK PACKAGE - POSTER GIF WITH TAGLINES\n\nurl <- \"https://www.imdb.com/title/tt0145487/taglines/?ref_=tt_stry_tg\"\n\ntaglines_imdb <- read_html(url)\n\ntaglines <- taglines_imdb %>%\n  html_elements(\".ipc-html-content-inner-div\") %>%\n  html_text2()\n\nposterurl <- \"https://i.redd.it/y0rggs4i4rk41.jpg\"\n\ntaglines_data <- tibble(posterurl, taglines)\n\nposter <- taglines_data$posterurl %>% na.omit()\n\npaste <- paste(taglines_data$taglines) %>%\n  str_wrap(40)\n\nspider_poster <- image_read(poster) %>%\n  image_join() %>%\n  image_scale(400) %>%\n  image_annotate(paste, size = 20, gravity = \"center\", font = \"Impact\", color = \"white\", boxcolor = \"black\") %>%\n  image_animate(fps = 0.5)\n\nspider_poster\n\n\n\nI had such a good time exploring features of the magick package and absolutely LOVE these creations!\n\n\n\n",
    "preview": "posts/2025-07-03-manipulating-images-with-the-magick-package/manipulating-images-with-the-magick-package_files/figure-html5/unnamed-chunk-2-1.png",
    "last_modified": "2025-07-03T19:32:54+12:00",
    "input_file": {}
  },
  {
    "path": "posts/2025-07-03-period-poverty-a-global-analysis/",
    "title": "Period Poverty: A Global Analysis",
    "description": "A video investigation of the stigma surrounding period care.",
    "author": [
      {
        "name": "Natasha Munn",
        "url": {}
      }
    ],
    "date": "2024-06-26",
    "categories": [],
    "contents": "\n\n\nMy idea to investigate period poverty came from an interest in the stigma surrounding it in society. I feel passionately about the importance of starting conversations and breaking the stigma. I want my video to act as a wake-up call for people who take their access to period care for granted.\nThe first area I researched was the cost of periods across the globe. I considered this a good jumping-off point because it observed the problem globally and examined what I believe to be one of the most pressing issues of period poverty: cost.\nThis visualisation was created using DataWrapper, which made it easy to import the data for period cost per country into a world map visualisation. This also allowed for features such as text annotations, colour legends, highlighting over hover, and interactive visualisation. Check it out!\n\n\nHowever, I knew the topic was much deeper than just money. This brought me to ideas such as the stigma surrounding periods and the effect on young people and their education. I presented these data sets using Canva’s built-in chart designs, which were extremely easy to use and manipulate!\n\n\nI used Canva Video Editor to create my final project, a software I am familiar with and love using for my communications projects. I was thoughtful with my editing decisions and worked hard to create something that looked professionally presented, easily understandable, and stylised well. I achieved this through simple background music, sound, animation, slide transitions, colour, and graphics. I also made sure to structure my argument thoughtfully and concisely by covering my introduction and three main topics, then ending with a conclusion and solutions to solve the problem.\nThis was such an enjoyable project to work on. I loved combining statistical analysis with visual storytelling and communications. It proved an excellent opportunity to combine my two majors and use data and statistics in a communications setting.\nOverall, I hope my video educates people on this stigmatised topic of period poverty through data storytelling. Enjoy!\n\n\n\n",
    "preview": {},
    "last_modified": "2025-07-03T19:27:55+12:00",
    "input_file": {}
  },
  {
    "path": "posts/welcome/",
    "title": "Kia ora!",
    "description": {},
    "author": [
      {
        "name": "Natasha Munn",
        "url": {}
      }
    ],
    "date": "2024-06-24",
    "categories": [],
    "contents": "\nKia ora! My name is Natasha. I am a third year student at the University of Auckland majoring in Statistics and Communications. I am passionate about learning and further developing the skills I have acquired throughout my degree. I have created this blog as a space to demonstrate my learning, document my progress, and have fun with data analysis and digital communications.\n\n\n\n",
    "preview": {},
    "last_modified": "2025-07-03T21:50:24+12:00",
    "input_file": {}
  }
]
